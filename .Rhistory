is.ts(data)
#Analysis...
is.ts(btc.2017)
abline(reg=lm(data~index(data)))
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
abline(reg=lm(data~index(data)))
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))
abline(reg = lm(btc.2017~index(btc.2017)))
covid.period <- data['20200130/20220505']
#Auto Correlation Model....
model <- lm(`BTC-USD.Adjusted` ~ ., data =data)
#Auto Correlation Model....
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(high ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
#ARMA Model...
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
print(AR)
#Analysis...
AR <- arima(data, order = c(1,0,0))
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
predict_AR <- predict(AR)
ts.plot(data$open)
?oo.plot()
?zoo.plot()
zoo?
?zoo
?zoo
plot(data$open)
AR_fit <- data$open - residuals(AR)
points(AR_fit, type = '1', col = 2, lty=2)
points(AR_fit, type = 'l', col = 2, lty=2)
AR_fit <- data$open - residuals(AR)
residuals(AR)
AR_fit <- data$open - residuals(AR)
AR_fit
data$open
residuals(AR)
AR_fit <- data$open - residuals(AR)
points(AR_fit, type = 'l', col = 2, lty=2)
predict_AR <- predict(AR)
predict_AR$pred[1]
predict(AR, n.ahead = 10)
plot(AirPassengers, xlim = c(1949, 1961))
plot(data$open, xlim = c(1949, 1961))
plot(data$open)
AR_forecast <- predict(AR, n.ahead = 10)$pred
AR_forecast_se <- predict(AR, n.ahead = 10)$se
points(AR_forecast, type = "l", col = 2)
plot(data$open)
AR_forecast <- predict(AR, n.ahead = 10)$pred
AR_forecast_se <- predict(AR, n.ahead = 10)$se
points(AR_forecast, type = "l", col = 2)
points(AR_forecast - 2*AR_forecast_se, type = "l", col = 2, lty = 2)
points(AR_forecast + 2*AR_forecast_se, type = "l", col = 2, lty = 2)
MA <- arima(data$open, order = c(0,0,1))
print(MA)
plot(data$open)
AR_fit <- data$open - resid(AR)
AR_fit <- data$open - zoo(resid(AR))
AR_fit <- data$open - zoo(resid(AR), order.by = index(data))
MR_fit <- data$open - zoo(resid(AR), order.by = index(data))
MA_fit <- data$open - zoo(resid(AR), order.by = index(data))
points(MA_fit, type = 'l', col = 2, lty=2)
predict_MA <- predict(MA)
predict_MA$pred[1]
predict(MA, n.ahead = 10)
plot(data$open)
MA_forecast <- predict(MA, n.ahead = 10)$pred
MA_forecast_se <- predict(MA, n.ahead = 10)$se
points(MA_forecast, type = "l", col = 2)
points(MA_forecast + 2*MA_forecast_se, type = "l", col = 2, lty = 2)
plot(data$open)
MA_forecast <- predict(MA, n.ahead = 10)$pred
MA_forecast_se <- predict(MA, n.ahead = 10)$se
points(MA_forecast, type = "l", col = 2)
points(MA_forecast - 2*MA_forecast_se, type = "l", col = 2, lty = 2)
points(MA_forecast + 2*MA_forecast_se, type = "l", col = 2, lty = 2)
cor(AR_fit, MA_fit)
AR_fit <- data$open - zoo(residuals(AR), order.by = index(data))
AR_fit
data$date <- index(data)
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data$date <- index(data)
row.names(data) <- NULL
data
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
gc()
library(zoo)
library(ggplot2)
library(pdfetch)
library(quantmod)
library(TTR)
library(lubridate)
library(plotrix)
library(stats)
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data$date <- index(data)
data$date
data
data <- cbind(date = index(data), data)
rownames(data) <- NULL
data
data <- cbind(date = index(data), data)
data$date <- index(data)
data$date
index(data)
dateSeq <- index(data)
dateSeq
data$date <- dateSeq
data
colnames(data)
data <- zoo(data, order.by = index(data), frequency = 52)
data$date <- dateSeq
data <- zoo(data, order.by = index(data), frequency = 52)
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
gc()
setwd("D:/dataScience/fiverr/gunneet/cryptoProject")
library(zoo)
library(ggplot2)
library(pdfetch)
library(quantmod)
library(TTR)
library(lubridate)
library(plotrix)
library(stats)
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data <- zoo(data, order.by = index(data), frequency = 52)
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
data$month <- month(as.POSIXlt(index(data), format="%d/%m/%Y"))
data$year <- year(as.POSIXlt(index(data), format = "%d/%m/%Y"))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$open), colour = 'black')+
geom_line(aes(y = data$close), colour = 'red')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$high, color = 'green'))+
geom_line(aes(y = data$low, color = 'yellow'))
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
covid.period <- data['20200130/20220505']
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
data$month <- month(as.POSIXlt(index(data), format="%d/%m/%Y"))
data$year <- year(as.POSIXlt(index(data), format = "%d/%m/%Y"))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$open), colour = 'black')+
geom_line(aes(y = data$close), colour = 'red')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$high, color = 'green'))+
geom_line(aes(y = data$low, color = 'yellow'))
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
covid.period <- data['20200130/20220505']
ggplot(data = covid.period, aes(x = as.POSIXct(index(covid.period), format="%d/%m/%Y")))+
geom_line(aes(y = covid.period$BTC.USD.Open, colour = 'covid'))+
scale_colour_manual(name = "year", aesthetics = "colour",values = c("covid" = "red"))+
scale_x_datetime(date_labels = "%b", date_breaks = "2 month")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
ggplot(data = covid.period, aes(x = as.POSIXct(index(covid.period), format="%d/%m/%Y")))+
geom_line(aes(y = covid.period$open, colour = 'covid'))+
scale_colour_manual(name = "year", aesthetics = "colour",values = c("covid" = "red"))+
scale_x_datetime(date_labels = "%b", date_breaks = "2 month")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
#Inprogress....
components.ts <- decompose(data)
plot(components.ts)
#Auto Correlation Model....
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(high ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(low ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(close ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(volume ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
plot(data$open)
AR_fit <- data$open - zoo(residuals(AR), order.by = index(data))
AR_fit <- data$open - residuals(AR)
AR_fit <- data$open - xts(residuals(AR))
data$open
AR_fit <- data$open - xts(residuals(AR), order.by(index(data)))
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
AR_fit
points(AR_fit, type = 'l', col = 2, lty=2)
data$open
xts(residuals(AR), order.by = index(data)
xts(residuals(AR), order.by = index(data))
xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
predict_AR <- predict(AR)
predict_AR$pred[1]
predict(AR, n.ahead = 10)
plot(data$open)
AR_forecast <- predict(AR, n.ahead = 10)$pred
AR_forecast_se <- predict(AR, n.ahead = 10)$se
points(AR_forecast, type = "l", col = 2)
points(AR_forecast - 2*AR_forecast_se, type = "l", col = 2, lty = 2)
points(AR_forecast + 2*AR_forecast_se, type = "l", col = 2, lty = 2)
ts.plot(data$open)
points(AR_forecast, type = "l", col = 2)
points(AR_forecast - 2*AR_forecast_se, type = "l", col = 2, lty = 2)
points(AR_forecast + 2*AR_forecast_se, type = "l", col = 2, lty = 2)
ts.plot(data$open)
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
predict_AR <- predict(AR)
predict_AR$pred[1]
predict(AR, n.ahead = 10)
ts.plot(data$open)
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
ts.plot(data$open)
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
is.ts(data)
abline(reg=lm(data$open~time(data)))
ts.plot(data$open)
abline(reg=lm(data$open~time(data)))
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
ts.plot(data$open)
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
AR <- arima(data$open, order = c(1,0,0))
print(AR)
ts.plot(data$open)
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
#Analysis...
AR <- arima(data$high, order = c(1,0,0))
print(AR)
ts.plot(data$open)
AR_fit <- data$open - xts(residuals(AR), order.by = index(data))
points(AR_fit, type = 'l', col = 2, lty=2)
?points
?points(AR_fit, type = '1', col = 2, lty=2)
points(AR_fit, type = '1', col = 2, lty=2)
points(AR_fit, type = 'p', col = 2, lty=2)
gc()
library(zoo)
library(ggplot2)
library(pdfetch)
library(quantmod)
library(TTR)
library(lubridate)
library(plotrix)
library(stats)
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data <- zoo(data, order.by = index(data), frequency = 52)
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
data$month <- month(as.POSIXlt(index(data), format="%d/%m/%Y"))
data$year <- year(as.POSIXlt(index(data), format = "%d/%m/%Y"))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$open), colour = 'black')+
geom_line(aes(y = data$close), colour = 'red')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$high, color = 'green'))+
geom_line(aes(y = data$low, color = 'yellow'))
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
covid.period <- data['20200130/20220505']
gc()
# install.packages('ggplot2')
# install.packages('pdfetch')
# install.packages('quantmod')
# install.packages('TTR')
# install.packages('Zoo')
# install.packages('statsmodels')
library(zoo)
library(ggplot2)
library(pdfetch)
library(quantmod)
library(TTR)
library(lubridate)
library(plotrix)
library(stats)
library(xts)
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
data$month <- month(as.POSIXlt(index(data), format="%d/%m/%Y"))
data$year <- year(as.POSIXlt(index(data), format = "%d/%m/%Y"))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$open), colour = 'black')+
geom_line(aes(y = data$close), colour = 'red')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$high, color = 'green'))+
geom_line(aes(y = data$low, color = 'yellow'))
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
covid.period <- data['20200130/20220505']
ggplot(data = covid.period, aes(x = as.POSIXct(index(covid.period), format="%d/%m/%Y")))+
geom_line(aes(y = covid.period$open, colour = 'covid'))+
scale_colour_manual(name = "year", aesthetics = "colour",values = c("covid" = "red"))+
scale_x_datetime(date_labels = "%b", date_breaks = "2 month")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
#Auto Correlation Model....
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(high ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(low ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(close ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(volume ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
#Analysis...
data.before.2022 <- data[data$year < 2022]
AR <- arima(data.before.2022$open, order = c(1,0,0))
print(AR)
AR_fit <- data.before.2022$open - xts(residuals(AR), order.by = index(data.before.2022))
MA <- arima(data.before.2022$open, order = c(0,0,1))
print(MA)
ts.plot(data.before.2022$open)
MA_fit <- data.before.2022$open - xts(resid(AR), order.by = index(data.before.2022))
points(MA_fit, type = 'l', col = 2, lty=2)
MA_fit
points(MA_fit, type = 'l', col = 2, lty=2)
predict_MA <- predict(MA)
predict_MA$pred[1]
predict(MA, n.ahead = 100)
ts.plot(data$open)
ts.plot(data.before.2022$open)
MA_forecast <- predict(MA, n.ahead = 10)$pred
MA_forecast_se <- predict(MA, n.ahead = 10)$se
points(MA_forecast, type = "l", col = 2)
points(MA_forecast - 2*MA_forecast_se, type = "l", col = 2, lty = 2)
points(MA_forecast + 2*MA_forecast_se, type = "l", col = 2, lty = 2)
cor(AR_fit, MA_fit)
AIC(AR)
AIC(MA)
BIC(AR)
BIC(MA)
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
library(forecast)
# install.packages('ggplot2')
# install.packages('pdfetch')
# install.packages('quantmod')
# install.packages('TTR')
# install.packages('Zoo')
# install.packages('statsmodels')
install.packages('forecast')
library(forecast)
model <- auto_arima(data$open)
model <- auto_arima(data$open)
model <- forecast::auto_arima(data$open)
model <- forecast::auto.arima(data$open)
model
forecast_data <- forecast(model, 10)
print(forecast_data)
plot(forecast_data, main = "forecasting_data for rain_ts")
model <- forecast::auto.arima(data.before.2022$open)
forecast_data <- forecast(model, 10)
forecast_data <- forecast(model, 100)
print(forecast_data)
plot(forecast_data, main = "forecasting_data for rain_ts")
plot(forecast_data, main = "forecasting_data for btc-USD")
forecast_data <- forecast(model, 10)
print(forecast_data)
plot(forecast_data, main = "forecasting_data for btc-USD")
