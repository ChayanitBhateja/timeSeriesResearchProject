ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$BTC.USD.Open))
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$BTC.USD.Open))
rlang::last_error()
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`, color = 'green'))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`, color = 'red'))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`, color = 'yellow'))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`, colour = 'green'))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`, colour = '#00ff00'))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`))
data <- zoo(data, order.by = index(data), frequency = 52)
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.High`, color = 'green'))+
geom_line(aes(y = data$`BTC-USD.Low`, color = 'yellow'))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`))+
geom_line(aes(y = data$`BTC-USD.Close`))
ggplot(data = data, aes(x = index(data), colour = c('green', 'yellow')))+
geom_line(aes(y = data$`BTC-USD.Open`))+
geom_line(aes(y = data$`BTC-USD.Close`))
ggplot(data = data, aes(x = index(data) hue = year))+
ggplot(data = data, aes(x = index(data), hue = year))+
geom_line(aes(y = data$`BTC-USD.Open`))+
geom_line(aes(y = data$`BTC-USD.Close`))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.High`, color = 'green'))+
geom_line(aes(y = data$`BTC-USD.Low`, color = 'yellow'))
ggplot(data = data, aes(x = index(data), hue = year))+
geom_line(aes(y = data$`BTC-USD.Open`))+
geom_line(aes(y = data$`BTC-USD.Close`))
ggplot(data = data, aes(x = index(data)),hue = year)+
geom_line(aes(y = data$`BTC-USD.Open`))+
geom_line(aes(y = data$`BTC-USD.Close`))
ggplot(data = data, aes(x = index(data)),colour = c('green','yellow'))+
geom_line(aes(y = data$`BTC-USD.Open`))+
geom_line(aes(y = data$`BTC-USD.Close`))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`), colour = 'green')+
geom_line(aes(y = data$`BTC-USD.Close`), colour = 'yellow')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`), colour = 'green')+
geom_line(aes(y = data$`BTC-USD.Close`), colour = 'yellow')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`), colour = 'green')+
geom_line(aes(y = data$`BTC-USD.Close`), colour = 'red')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$`BTC-USD.Open`), colour = 'black')+
geom_line(aes(y = data$`BTC-USD.Close`), colour = 'red')
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$`BTC-USD.Open`, colour = '2017'))+
geom_line(aes(y = btc.2018$`BTC-USD.Open`, colour = '2018'))+
geom_line(aes(y = btc.2019$`BTC-USD.Open`, colour = '2019'))+
geom_line(aes(y = btc.2020$`BTC-USD.Open`, colour = '2020'))+
geom_line(aes(y = btc.2021$`BTC-USD.Open`, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$`BTC-USD.Open`, colour = '2017'))+
geom_line(aes(y = btc.2018$`BTC-USD.Open`, colour = '2018'))+
geom_line(aes(y = btc.2019$`BTC-USD.Open`, colour = '2019'))+
geom_line(aes(y = btc.2020$`BTC-USD.Open`, colour = '2020'))+
geom_line(aes(y = btc.2021$`BTC-USD.Open`, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
btc.2017$`BTC-USD.Open`
btc.2017$`BTC-USD.Open`
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$`BTC-USD.Open`, colour = '2017'))+
geom_line(aes(y = btc.2018$`BTC-USD.Open`, colour = '2018'))+
geom_line(aes(y = btc.2019$`BTC-USD.Open`, colour = '2019'))+
geom_line(aes(y = btc.2020$`BTC-USD.Open`, colour = '2020'))+
geom_line(aes(y = btc.2021$`BTC-USD.Open`, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
covid.period <- data['20200130/20220505']
covid.period <- data['20200130/20220505']
data
covid.period <- data['20200130/20220505']
type(data)
covid.period <- data['20200130/20220505']
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$`BTC-USD.Open`, colour = '2017'))+
geom_line(aes(y = btc.2018$`BTC-USD.Open`, colour = '2018'))+
geom_line(aes(y = btc.2019$`BTC-USD.Open`, colour = '2019'))+
geom_line(aes(y = btc.2020$`BTC-USD.Open`, colour = '2020'))+
geom_line(aes(y = btc.2021$`BTC-USD.Open`, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
data = getSymbols('BTC', src = 'yahoo',auto.assign = FALSE)
data <- zoo(data, order.by = index(data), frequency = 52)
data
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
data
colnames(data) <- c('open','high','low','close','volume','adjusted')
data <- zoo(data, order.by = index(data), frequency = 52)
data
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
data$month <- month(as.POSIXlt(index(data), format="%d/%m/%Y"))
data$year <- year(as.POSIXlt(index(data), format = "%d/%m/%Y"))
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$open), colour = 'black')+
geom_line(aes(y = data$close), colour = 'red')
ggplot(data = data, aes(x = index(data)))+
geom_line(aes(y = data$high, color = 'green'))+
geom_line(aes(y = data$low, color = 'yellow'))
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
covid.period <- data['20200130/20220505']
#Analysis...
is.ts(data)
#Analysis...
is.ts(btc.2017)
abline(reg=lm(data~index(data)))
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
abline(reg=lm(data~index(data)))
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))+
geom_line(aes(y = btc.2018$open, colour = '2018'))+
geom_line(aes(y = btc.2019$open, colour = '2019'))+
geom_line(aes(y = btc.2020$open, colour = '2020'))+
geom_line(aes(y = btc.2021$open, colour = "2021"))+
# geom_line(aes(y = btc.2022$BTC.USD.Open, colour = "2022"))
scale_colour_manual(name = "year", aesthetics = "colour",values = c("2017" = "darkblue", "2018" = "red", '2019' = 'orange', "2020" = 'purple', "2021" = 'green', "2022" = 'pink'))+
scale_x_datetime(date_labels = "%b")+
xlab('Month of year')+
ylab('BTC-USD Open Price')+
theme_minimal()
ggplot(data = btc.2017, aes(x = as.POSIXct(index(btc.2017), format="%d/%m/%Y")))+
geom_line(aes(y = btc.2017$open, colour = '2017'))
abline(reg = lm(btc.2017~index(btc.2017)))
covid.period <- data['20200130/20220505']
#Auto Correlation Model....
model <- lm(`BTC-USD.Adjusted` ~ ., data =data)
#Auto Correlation Model....
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
model <- lm(high ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
#ARMA Model...
model <- lm(open ~ ., data =data)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
acf(model$residuals,plot = TRUE, type = 'correlation');
pacf(model$residuals, pl = TRUE)
print(AR)
#Analysis...
AR <- arima(data, order = c(1,0,0))
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
#Analysis...
AR <- arima(data$open, order = c(1,0,0))
print(AR)
predict_AR <- predict(AR)
ts.plot(data$open)
?oo.plot()
?zoo.plot()
zoo?
?zoo
?zoo
plot(data$open)
AR_fit <- data$open - residuals(AR)
points(AR_fit, type = '1', col = 2, lty=2)
points(AR_fit, type = 'l', col = 2, lty=2)
AR_fit <- data$open - residuals(AR)
residuals(AR)
AR_fit <- data$open - residuals(AR)
AR_fit
data$open
residuals(AR)
AR_fit <- data$open - residuals(AR)
points(AR_fit, type = 'l', col = 2, lty=2)
predict_AR <- predict(AR)
predict_AR$pred[1]
predict(AR, n.ahead = 10)
plot(AirPassengers, xlim = c(1949, 1961))
plot(data$open, xlim = c(1949, 1961))
plot(data$open)
AR_forecast <- predict(AR, n.ahead = 10)$pred
AR_forecast_se <- predict(AR, n.ahead = 10)$se
points(AR_forecast, type = "l", col = 2)
plot(data$open)
AR_forecast <- predict(AR, n.ahead = 10)$pred
AR_forecast_se <- predict(AR, n.ahead = 10)$se
points(AR_forecast, type = "l", col = 2)
points(AR_forecast - 2*AR_forecast_se, type = "l", col = 2, lty = 2)
points(AR_forecast + 2*AR_forecast_se, type = "l", col = 2, lty = 2)
MA <- arima(data$open, order = c(0,0,1))
print(MA)
plot(data$open)
AR_fit <- data$open - resid(AR)
AR_fit <- data$open - zoo(resid(AR))
AR_fit <- data$open - zoo(resid(AR), order.by = index(data))
MR_fit <- data$open - zoo(resid(AR), order.by = index(data))
MA_fit <- data$open - zoo(resid(AR), order.by = index(data))
points(MA_fit, type = 'l', col = 2, lty=2)
predict_MA <- predict(MA)
predict_MA$pred[1]
predict(MA, n.ahead = 10)
plot(data$open)
MA_forecast <- predict(MA, n.ahead = 10)$pred
MA_forecast_se <- predict(MA, n.ahead = 10)$se
points(MA_forecast, type = "l", col = 2)
points(MA_forecast + 2*MA_forecast_se, type = "l", col = 2, lty = 2)
plot(data$open)
MA_forecast <- predict(MA, n.ahead = 10)$pred
MA_forecast_se <- predict(MA, n.ahead = 10)$se
points(MA_forecast, type = "l", col = 2)
points(MA_forecast - 2*MA_forecast_se, type = "l", col = 2, lty = 2)
points(MA_forecast + 2*MA_forecast_se, type = "l", col = 2, lty = 2)
cor(AR_fit, MA_fit)
AR_fit <- data$open - zoo(residuals(AR), order.by = index(data))
AR_fit
data$date <- index(data)
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
data = getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data$date <- index(data)
row.names(data) <- NULL
data
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
gc()
library(zoo)
library(ggplot2)
library(pdfetch)
library(quantmod)
library(TTR)
library(lubridate)
library(plotrix)
library(stats)
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data$date <- index(data)
data$date
data
data <- cbind(date = index(data), data)
rownames(data) <- NULL
data
data <- cbind(date = index(data), data)
data$date <- index(data)
data$date
index(data)
dateSeq <- index(data)
dateSeq
data$date <- dateSeq
data
colnames(data)
data <- zoo(data, order.by = index(data), frequency = 52)
data$date <- dateSeq
data <- zoo(data, order.by = index(data), frequency = 52)
plot(zoo(data), plot.type = 'multiple',col = c('black','blue','green','yellow','orange','purple'))
gc()
setwd("D:/dataScience/fiverr/gunneet/cryptoProject")
setwd("D:/dataScience/fiverr/gunneet/cryptoProject")
# install.packages('ggplot2')
# install.packages('pdfetch')
# install.packages('quantmod')
# install.packages('TTR')
# install.packages('Zoo')
# install.packages('statsmodels')
# install.packages('forecast')
install.packages('prophet')
source("D:/dataScience/fiverr/gunneet/cryptoProject/dataIngestion.R", echo=TRUE)
svm.model <- svm(data$open~index(data), type = 'eps-regression', kernel = 'radial', cost = 10000, gamma = 10)
library(e1071)
svm.model <- svm(data$open~index(data), type = 'eps-regression', kernel = 'radial', cost = 10000, gamma = 10)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(DF$y), max(DF$y))
ylim <- c(min(data$open), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$open, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$volume~index(data), type = 'eps-regression', kernel = 'radial', cost = 10000, gamma = 10)
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$volume), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$volume, col="blue", ylim=ylim, xlim=xlim, type="l")
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 0.001)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 100)
predictions <- predict(svm.model, data = data.frame(x=nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.01, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.5, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 1000)
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 100)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 500)
predictions <- predict(svm.model, data = data.frame(x=nd))
plot(predictions, col="red", ylim=ylim, xlim=xlim)
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 2000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.001, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.05, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
?svm
svm.model <- ?svm(data$high~index(data), type = 'nu-regression', kernel = 'radial', cost = 0.1, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
svm.model <- svm(data$high~index(data), type = 'nu-regression', kernel = 'radial', cost = 0.1, gamma = 1000)
nd <- 1:3200
predictions <- predict(svm.model, data = data.frame(x=nd))
ylim <- c(min(data$high), max(data$open))
xlim <- c(min(nd),max(nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
svm.model <- svm(data$high~index(data), type = 'nu-regression', kernel = 'radial', cost = 0.1, gamma = 100)
predictions <- predict(svm.model, data = data.frame(x=nd))
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
plot(predictions, col="red", ylim=ylim, xlim=xlim)
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
plot(data$high, col="blue", ylim=ylim, xlim=xlim, type="l")
par(new=TRUE)
plot(predictions, col="red", ylim=ylim, xlim=xlim)
365*7
predictions
svm.model
svm.model <- svm(data$high~index(data), type = 'eps-regression', kernel = 'radial', cost = 0.1, gamma = 1000)
svm.model
rmse(data$high, predictions)
library(MLmetrics)
rmse(data$high, predictions)
RMSE(predictions, data$high)
# install.packages('ggplot2')
# install.packages('pdfetch')
# install.packages('quantmod')
# install.packages('TTR')
# install.packages('Zoo')
# install.packages('statsmodels')
# install.packages('forecast')
# install.packages('prophet')
install.packages('keras')
library(keras)
data <- getSymbols('BTC-USD', src = 'yahoo',auto.assign = FALSE)
colnames(data) <- c('open','high','low','close','volume','adjusted')
data$month <- month(as.POSIXlt(index(data), format="%d/%m/%Y"))
data$year <- year(as.POSIXlt(index(data), format = "%d/%m/%Y"))
btc.2017 <- data[data$year == 2017]
btc.2018 <- data[data$year == 2018]
btc.2019 <- data[data$year == 2019]
btc.2020 <- data[data$year == 2020]
# Removing leap year leap day 29-02-2020 from the data to match 365 days...
btc.2020 <- btc.2020[!(format(index(btc.2020), format = "%m") =="02" &
format(index(btc.2020), format = "%d")=="29"),]
btc.2021 <- data[data$year == 2021]
btc.2022 <- data[data$year == 2022]
#Analysis...
data.before.2022 <- data[data$year < 2022]
model <- keras_model_sequential()
Y
library(keras)
model <- keras_model_sequential()
install_tensorflow()
tensorflow::install_tensorflow()
model %>%
layer_embedding(input_dim = 500, output_dim = 32) %>%
layer_simple_rnn(units = 32) %>%
layer_dense(units = 1, activation = 'sigmoid')
model %>% compile(optimizer = 'rmsprop',
loss = 'binary_crossentropy',
metrics = c('acc'))
